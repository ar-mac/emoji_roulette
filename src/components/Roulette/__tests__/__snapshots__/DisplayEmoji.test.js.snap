// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DisplayEmoji /> renders with default props 1`] = `
DisplayEmoji {
  "_reactInternalInstance": ShallowComponentWrapper {
    "_calledComponentWillUnmount": false,
    "_compositeType": 0,
    "_context": Object {},
    "_currentElement": <DisplayEmoji
      clearIndex={[Function]}
      emoji={
            Object {
                  "codepoint": 128512,
                  "emojiIcon": "ðŸ˜€",
                }
      }
      index={0}
      secondsPassed={0}
/>,
    "_debugID": 1,
    "_hostContainerInfo": null,
    "_hostParent": null,
    "_instance": [Circular],
    "_mountOrder": 1,
    "_pendingCallbacks": null,
    "_pendingElement": null,
    "_pendingForceUpdate": false,
    "_pendingReplaceState": false,
    "_pendingStateQueue": null,
    "_renderedComponent": NoopInternalComponent {
      "_currentElement": <div
        className="emoji-card"
>
        <div
                className="emoji-card__head"
        >
                <div>
                        secondsPassed: 
                        0
                </div>
                <div>
                        <button
                                onClick={[Function]}
                        >
                                Clear index
                        </button>
                </div>
        </div>
        <div
                className="emoji-card__body"
        >
                <div>
                        emoji: 
                        ðŸ˜€
                </div>
                <div>
                        code: 
                        128512
                </div>
                <div>
                        parsed: 
                        ðŸ˜€
                </div>
                <div>
                        twemoji: 
                        <div
                                dangerouslySetInnerHTML={
                                        Object {
                                                "__html": "some mocked string ðŸ˜€",
                                              }
                                }
                        />
                </div>
                <div>
                        index: 
                        0
                </div>
        </div>
</div>,
      "_debugID": 2,
      "_renderedOutput": <div
        className="emoji-card"
>
        <div
                className="emoji-card__head"
        >
                <div>
                        secondsPassed: 
                        0
                </div>
                <div>
                        <button
                                onClick={[Function]}
                        >
                                Clear index
                        </button>
                </div>
        </div>
        <div
                className="emoji-card__body"
        >
                <div>
                        emoji: 
                        ðŸ˜€
                </div>
                <div>
                        code: 
                        128512
                </div>
                <div>
                        parsed: 
                        ðŸ˜€
                </div>
                <div>
                        twemoji: 
                        <div
                                dangerouslySetInnerHTML={
                                        Object {
                                                "__html": "some mocked string ðŸ˜€",
                                              }
                                }
                        />
                </div>
                <div>
                        index: 
                        0
                </div>
        </div>
</div>,
    },
    "_renderedNodeType": 0,
    "_rootNodeID": 0,
    "_topLevelWrapper": null,
    "_updateBatchNumber": null,
    "_warnedAboutRefsInRender": false,
  },
  "context": Object {},
  "props": Object {
    "clearIndex": [Function],
    "emoji": Object {
      "codepoint": 128512,
      "emojiIcon": "ðŸ˜€",
    },
    "index": 0,
    "secondsPassed": 0,
  },
  "refs": Object {},
  "state": null,
  "updater": Object {
    "enqueueCallback": [Function],
    "enqueueCallbackInternal": [Function],
    "enqueueElementInternal": [Function],
    "enqueueForceUpdate": [Function],
    "enqueueReplaceState": [Function],
    "enqueueSetState": [Function],
    "isMounted": [Function],
    "validateCallback": [Function],
  },
}
`;

exports[`<DisplayEmoji /> renders with invalid prop 1`] = `
DisplayEmoji {
  "_reactInternalInstance": ShallowComponentWrapper {
    "_calledComponentWillUnmount": false,
    "_compositeType": 0,
    "_context": Object {},
    "_currentElement": <DisplayEmoji
      clearIndex={[Function]}
      emoji={
            Object {
                  "codepoint": 128512,
                  "emojiIcon": "ðŸ˜€",
                }
      }
      index={0}
      secondsPassed={undefined}
/>,
    "_debugID": 3,
    "_hostContainerInfo": null,
    "_hostParent": null,
    "_instance": [Circular],
    "_mountOrder": 2,
    "_pendingCallbacks": null,
    "_pendingElement": null,
    "_pendingForceUpdate": false,
    "_pendingReplaceState": false,
    "_pendingStateQueue": null,
    "_renderedComponent": NoopInternalComponent {
      "_currentElement": <div
        className="emoji-card"
>
        <div
                className="emoji-card__head"
        >
                <div>
                        <button
                                onClick={[Function]}
                        >
                                Clear index
                        </button>
                </div>
        </div>
        <div
                className="emoji-card__body"
        >
                <div>
                        emoji: 
                        ðŸ˜€
                </div>
                <div>
                        code: 
                        128512
                </div>
                <div>
                        parsed: 
                        ðŸ˜€
                </div>
                <div>
                        twemoji: 
                        <div
                                dangerouslySetInnerHTML={
                                        Object {
                                                "__html": "some mocked string ðŸ˜€",
                                              }
                                }
                        />
                </div>
                <div>
                        index: 
                        0
                </div>
        </div>
</div>,
      "_debugID": 4,
      "_renderedOutput": <div
        className="emoji-card"
>
        <div
                className="emoji-card__head"
        >
                <div>
                        <button
                                onClick={[Function]}
                        >
                                Clear index
                        </button>
                </div>
        </div>
        <div
                className="emoji-card__body"
        >
                <div>
                        emoji: 
                        ðŸ˜€
                </div>
                <div>
                        code: 
                        128512
                </div>
                <div>
                        parsed: 
                        ðŸ˜€
                </div>
                <div>
                        twemoji: 
                        <div
                                dangerouslySetInnerHTML={
                                        Object {
                                                "__html": "some mocked string ðŸ˜€",
                                              }
                                }
                        />
                </div>
                <div>
                        index: 
                        0
                </div>
        </div>
</div>,
    },
    "_renderedNodeType": 0,
    "_rootNodeID": 0,
    "_topLevelWrapper": null,
    "_updateBatchNumber": null,
    "_warnedAboutRefsInRender": false,
  },
  "context": Object {},
  "props": Object {
    "clearIndex": [Function],
    "emoji": Object {
      "codepoint": 128512,
      "emojiIcon": "ðŸ˜€",
    },
    "index": 0,
    "secondsPassed": undefined,
  },
  "refs": Object {},
  "state": null,
  "updater": Object {
    "enqueueCallback": [Function],
    "enqueueCallbackInternal": [Function],
    "enqueueElementInternal": [Function],
    "enqueueForceUpdate": [Function],
    "enqueueReplaceState": [Function],
    "enqueueSetState": [Function],
    "isMounted": [Function],
    "validateCallback": [Function],
  },
}
`;

exports[`<DisplayEmoji /> renders without clearIndex 1`] = `
DisplayEmoji {
  "_reactInternalInstance": ShallowComponentWrapper {
    "_calledComponentWillUnmount": false,
    "_compositeType": 0,
    "_context": Object {},
    "_currentElement": <DisplayEmoji
      clearIndex={undefined}
      emoji={
            Object {
                  "codepoint": 128512,
                  "emojiIcon": "ðŸ˜€",
                }
      }
      index={0}
      secondsPassed={0}
/>,
    "_debugID": 5,
    "_hostContainerInfo": null,
    "_hostParent": null,
    "_instance": [Circular],
    "_mountOrder": 3,
    "_pendingCallbacks": null,
    "_pendingElement": null,
    "_pendingForceUpdate": false,
    "_pendingReplaceState": false,
    "_pendingStateQueue": null,
    "_renderedComponent": NoopInternalComponent {
      "_currentElement": <div
        className="emoji-card"
>
        <div
                className="emoji-card__head"
        >
                <div>
                        secondsPassed: 
                        0
                </div>
        </div>
        <div
                className="emoji-card__body"
        >
                <div>
                        emoji: 
                        ðŸ˜€
                </div>
                <div>
                        code: 
                        128512
                </div>
                <div>
                        parsed: 
                        ðŸ˜€
                </div>
                <div>
                        twemoji: 
                        <div
                                dangerouslySetInnerHTML={
                                        Object {
                                                "__html": "some mocked string ðŸ˜€",
                                              }
                                }
                        />
                </div>
                <div>
                        index: 
                        0
                </div>
        </div>
</div>,
      "_debugID": 6,
      "_renderedOutput": <div
        className="emoji-card"
>
        <div
                className="emoji-card__head"
        >
                <div>
                        secondsPassed: 
                        0
                </div>
        </div>
        <div
                className="emoji-card__body"
        >
                <div>
                        emoji: 
                        ðŸ˜€
                </div>
                <div>
                        code: 
                        128512
                </div>
                <div>
                        parsed: 
                        ðŸ˜€
                </div>
                <div>
                        twemoji: 
                        <div
                                dangerouslySetInnerHTML={
                                        Object {
                                                "__html": "some mocked string ðŸ˜€",
                                              }
                                }
                        />
                </div>
                <div>
                        index: 
                        0
                </div>
        </div>
</div>,
    },
    "_renderedNodeType": 0,
    "_rootNodeID": 0,
    "_topLevelWrapper": null,
    "_updateBatchNumber": null,
    "_warnedAboutRefsInRender": false,
  },
  "context": Object {},
  "props": Object {
    "clearIndex": undefined,
    "emoji": Object {
      "codepoint": 128512,
      "emojiIcon": "ðŸ˜€",
    },
    "index": 0,
    "secondsPassed": 0,
  },
  "refs": Object {},
  "state": null,
  "updater": Object {
    "enqueueCallback": [Function],
    "enqueueCallbackInternal": [Function],
    "enqueueElementInternal": [Function],
    "enqueueForceUpdate": [Function],
    "enqueueReplaceState": [Function],
    "enqueueSetState": [Function],
    "isMounted": [Function],
    "validateCallback": [Function],
  },
}
`;
